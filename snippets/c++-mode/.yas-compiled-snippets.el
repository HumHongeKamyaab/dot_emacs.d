;;; Compiled snippets and support files for `c++-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'c++-mode
		     '(("using" "using namespace ${std};\n$0" "using namespace ..." nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/using" nil nil)
		       ("template" "template <typename ${T}>" "template <typename ...>" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/template" nil nil)
		       ("printself" "void ${1:`(capitalize (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))`}::printself(std::ostream & stream, int indent) const {\n  std::string space;\n  for(Int i = 0; i < indent; i++, space += AKANTU_INDENT);\n\n  stream << space << \"${1:$(yas/substr text \"[^: ]*\")} [\" << std::endl;\n\n  stream << space << \"]\" << std::endl;\n};\n" "void printself(...) cont { ... }" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/printself" nil nil)
		       ("inst" "INSTANSIATE_MATERIAL(${1:`(yas/replace-all \"_\" \"\" (capitalize \n      			       	      (file-name-nondirectory\n                                          (file-name-sans-extension (buffer-file-name)))))`});\n$0" "INSTANTIATE_MATERIAL(...)" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/instansiate" nil nil)
		       ("inout" "AKANTU_DEBUG_IN();\n`yas/selected-text`$0\nAKANTU_DEBUG_OUT();" "AKANTU_DEBUG_IN(); ... AKANTU_DEBUG_OUT();" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/inout" nil nil)
		       ("for" "for ($1; ${2:it} != ${3:end}; ${4:++$2}) {\n  $0\n}" "for (; it != end; ++it) { ... }" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/for.1" nil nil)
		       ("for" "for (${1:UInt ${2:i} = 0}; ${3:$2 < N}; ${4:++$2}) {\n    $0\n}\n" "for (...; ...; ...) { ... }" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/for" nil nil)
		       ("class" "class ${1:`(replace-regexp-in-string \"_\" \"\" (capitalize \n      			       	      (file-name-nondirectory\n                                          (file-name-sans-extension (buffer-file-name)))))`} {\n  /* ------------------------------------------------------------------------ */\n  /* Constructors/Destructors                                                 */\n  /* ------------------------------------------------------------------------ */\npublic:\n\n  ${1:$(yas/substr yas-text \"[^: ]*\")}($2);\n  virtual ~${1:$(yas/substr yas-text \"[^: ]*\")}();\n\n  /* ------------------------------------------------------------------------ */\n  /* Methods                                                                  */\n  /* ------------------------------------------------------------------------ */\npublic:\n\n  /* ------------------------------------------------------------------------ */\n  /* Accessors                                                                */\n  /* ------------------------------------------------------------------------ */\npublic:\n\n  /* ------------------------------------------------------------------------ */\n  /* Class Members                                                            */\n  /* ------------------------------------------------------------------------ */\nprivate:\n\n};\n" "class ... { ... }" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/class" nil nil)
		       ("beginend" "${1:v}.begin(), $1.end" "v.begin(), v.end()" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/beginend" nil nil)
		       ("akantu" "namespace akantu {\n\n`yas/selected-text`$0\n\n} // akantu\n" "namespace akantu" nil nil nil "/home/richart/.emacs.d/snippets/c++-mode/akantu" nil nil)))


;;; Do not edit! File generated at Tue Dec 20 16:28:02 2016
